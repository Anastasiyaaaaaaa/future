{"version":3,"sources":["Components/SelectionButtons/SelectionButtons.js","Components/Loading/Loading.js","Components/Filter/Filter.js","Components/Pagination/Pagination.js","Components/OnRowSelectInfo/OnRowSelectInfo.js","Components/Form/Form.js","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["props","className","onClick","onSelect","useState","value","setValue","onSearch","type","placeholder","onChange","event","target","numberOfPages","pages","map","n","key","currentPage","handleClick","row","firstName","lastName","defaultValue","description","address","streetAddress","city","state","zip","Form","setState","onButtonClick","handleClickCancel","id","email","phone","onButtonActive","handleChange","bind","handleSubmit","name","this","user","addRow","preventDefault","onSubmit","required","pattern","disabled","isDisabled","React","Component","onSort","sortField","sortSymbol","data","item","onRowSelect","App","searchHandler","search","SelectionButtonsHandler","url","isButtonSelected","isLoading","error","fetchData","onSortHandler","sortColumn","cloneData","concat","sortType","sort","a","b","asc","directionSymbol","e","newCurrentPage","Number","innerHTML","addedRow","newRow","unshift","pageSize","symbol","fetch","method","headers","then","res","json","result","filter","toLowerCase","includes","indexOfLastData","indexOfFirstData","filteredData","getFilteredData","Math","ceil","length","currentData","slice","i","push","Loading","Filter","Table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.68967a07.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SelectionButtons.css\";\nexport default (props) => {\n  \n  const smallUrl = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n  const bigUrl = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n  \n  const mainText = \"Выберите набор данных: \";\n  const buttonText1 = \"Маленький\";\n  const buttonText2 = \"Большой\";\n\n  return (\n    <div className=\"userChoise\">\n      <div className=\"info\"> {mainText}</div>\n      <div className=\"mainButtons\">\n        <button\n          onClick={() => props.onSelect(smallUrl)}\n          className=\"btn btn-outline-warning\"\n        >\n          {buttonText1}\n        </button>\n        <button\n          onClick={() => props.onSelect(bigUrl)}\n          className=\"btn btn-outline-info\"\n        >\n          {buttonText2}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Loader.css\";\n\nexport default () => (\n  <div className=\"Loader\">\n    <div className=\"lds-heart\">\n      <div></div>\n    </div>\n    <div className=\"LoaderText\">Загрузка данных...</div>\n  </div>\n);\n","import React, { useState } from \"react\";\n\nexport default (props) => {\n  const [value, setValue] = useState(\"\");\n  \n  const valueChangeHandler = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <div className=\"tableFilter\">\n      <div className=\"input-group \">\n        <div className=\"input-group-prepend\">\n          <button\n            className=\"btn btn-secondary\"\n            onClick={() => props.onSearch(value)}\n          >\n            Найти\n          </button>\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"Введите текст для поиска\"\n          className=\"form-control\"\n          onChange={valueChangeHandler}\n          value={value}\n        />{\" \"}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n import './Pagination.css'\n \nexport default (props) => (\n    <div className=\"paginator\">\n    {props.numberOfPages > 1\n      ? props.pages.map((n) => (\n          <span\n            key={n}\n            className={\n              props.currentPage === n\n                ? \"selectedPage\"\n                : \"notSelectedPage\"\n            }\n            onClick={props.handleClick}\n          >\n            {n}{\" \"}\n          </span>\n        ))\n      : null}\n  </div>\n)","import React from 'react';\nimport './OnRowSelectInfo.css'\nexport default ({row}) => (\n  <div className=\"onRowSelectInfo\">\n    <p>Выбран пользователь <b>{row.firstName + ' ' + row.lastName}</b></p>\n    <p>\n    Описание: <br />\n    <textarea defaultValue={row.description} />\n    </p>\n\n    <p>Адрес проживания: <b>{row.address.streetAddress}</b></p>\n    <p>Город: <b>{row.address.city}</b></p>\n    <p>Провинция/штат: <b>{row.address.state}</b></p>\n    <p>Индекс: <b>{row.address.zip}</b></p>\n\n  </div>\n)","import React from \"react\";\nimport \"./Form.css\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n\n      onButtonClick: false,\n      onButtonActive: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit(event) {\n    let user = {\n      id: this.state.id,\n      firstName: this.state.firstName,\n      lastName: this.state.lastName,\n      email: this.state.email,\n      phone: this.state.phone,\n      address: {\n        streetAddress: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n      },\n      description: \"Это новый пользователь!\",\n    };\n\n    this.props.addRow(user);\n\n    this.setState({\n      onButtonClick: false,\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n    });\n    event.preventDefault();\n  }\n\n  handleClick = () => {\n    this.setState({ onButtonClick: true });\n  };\n  handleClickCancel = () => {\n    this.setState({\n      onButtonClick: false,\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n    });\n  };\n\n  isDisabled() {\n    const { id, firstName, lastName, email, phone } = this.state;\n\n    /* нужно добавить проверку на уже существующий key */\n\n    if (\n      id === \"\" ||\n      firstName === \"\" ||\n      lastName === \"\" ||\n      email === \"\" ||\n      phone === \"\"\n    ) {\n      return true;\n    } else return false;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.onButtonClick === false ? (\n          <button onClick={this.handleClick} className=\"btn btn-success\">\n            Добавить запись\n          </button>\n        ) : (\n          <div>\n            <form onSubmit={this.handleSubmit} className=\"tableForm\">\n              <div className=\"headerButton\">\n                <button\n                className=\"btn navbar-toggle\"\n                onClick={this.handleClickCancel}\n              >\n                x\n              </button>\n              </div>\n              \n              <label className=\"formHeaderlabel\">Введите данные: </label>\n\n              <label className=\"col-form-label-sm\">\n                id:\n                <input\n                  className=\"form-control\"\n                  required\n                  name=\"id\"\n                  type=\"id\"\n                  pattern=\"^[ 0-9]+$\"\n                  placeholder=\"12\"\n                  value={this.state.id}\n                  onChange={this.handleChange}\n                />\n              </label>\n\n              <label className=\"col-form-label-sm\">\n                firstName:\n                <input\n                  className=\"form-control\"\n                  required\n                  name=\"firstName\"\n                  type=\"text\"\n                  pattern=\"^[a-zA-Z]+$\"\n                  placeholder=\"Louis\"\n                  value={this.state.firstName}\n                  onChange={this.handleChange}\n                />\n              </label>\n\n              <label className=\"col-form-label-sm\">\n                lastName:\n                <input\n                  className=\"form-control\"\n                  required\n                  name=\"lastName\"\n                  type=\"text\"\n                  pattern=\"^[a-zA-Z]+$\"\n                  placeholder=\"Gunter\"\n                  value={this.state.lastName}\n                  onChange={this.handleChange}\n                />\n              </label>\n\n              <label className=\"col-form-label-sm\">\n                email:\n                <input\n                  className=\"form-control\"\n                  required\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"example@mail.com\"\n                  value={this.state.email}\n                  onChange={this.handleChange}\n                />\n              </label>\n\n              <label className=\"col-form-label-sm\">\n                phone:\n                <input\n                  className=\"form-control\"\n                  required\n                  name=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"(888)888-8888\"\n                  pattern=\"\\([0-9]{3}\\)[0-9]{3}-[0-9]{4}\"\n                  value={this.state.phone}\n                  onChange={this.handleChange}\n                />\n              </label>\n        <br />\n              <input\n                disabled={this.isDisabled()}\n                type=\"submit\"\n                value=\"Добавить в таблицу\"\n                className=\"btn btn-outline-success\"\n              />\n            </form>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\n\nexport default (props) => (\n  <div>\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th onClick={() => props.onSort(\"id\")}>\n            ID\n            {props.sortField === \"id\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"firstName\")}>\n            First Name\n            {props.sortField === \"firstName\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"lastName\")}>\n            Last Name\n            {props.sortField === \"lastName\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"email\")}>\n            E-mail\n            {props.sortField === \"email\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"phone\")}>\n            Phone\n            {props.sortField === \"phone\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.map((item) => (\n          <tr key={item.id + item.phone} onClick={props.onRowSelect.bind(null, item)}>\n            <td>{item.id}</td>\n            <td>{item.firstName}</td>\n            <td>{item.lastName}</td>\n            <td>{item.email}</td>\n            <td>{item.phone}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport SelectionButtons from \"./Components/SelectionButtons/SelectionButtons\";\nimport Loading from \"./Components/Loading/Loading\";\nimport Filter from \"./Components/Filter/Filter\";\nimport Pagination from \"./Components/Pagination/Pagination\";\nimport OnRowSelectInfo from \"./Components/OnRowSelectInfo/OnRowSelectInfo\";\nimport Form from \"./Components/Form/Form\";\nimport Table from \"./Components/Table/Table\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n\n      /* ошибка при запросе на сервер */\n      error: null,\n\n      /* кнопки выбора набора данных*/\n      isButtonSelected: false,\n\n      /* индикатор загрузки */\n      isLoading: false,\n\n      /* пагинация */\n      pageSize: 50,\n      currentPage: 1,\n\n      /* поиск */\n      search: \"\",\n\n      /* сортировка */\n      sortColumn: \"\",\n      sort: \"asc\",\n      directionSymbol: {\n        symbol: \"asc\",\n      },\n\n      /* выбранная строка */\n      row: null,\n    };\n  }\n\n  async fetchData(url) {\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoading: false,\n            data: result,\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoading: true,\n            error,\n          });\n        }\n      );\n  }\n\n  /* фильтрация */\n  searchHandler = (search) => this.setState({ search, currentPage: 1 });\n\n  getFilteredData() {\n    const { data, search } = this.state;\n    const cloneData = data.concat();\n    if (!search) {\n      return cloneData;\n    }\n    return cloneData.filter((item) => {\n      return (\n        item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n        item[\"email\"].toLowerCase().includes(search.toLowerCase())\n      );\n    });\n  }\n\n  SelectionButtonsHandler = (url) => {\n    /* показываем индикатор загрузки\n       и передаем url */\n    this.setState({\n      isButtonSelected: true,\n      isLoading: true,\n      error: false,\n    });\n    this.fetchData(url);\n  };\n\n  /* сортировка */\n  onSortHandler = (sortColumn) => {\n    const cloneData = this.state.data.concat();\n    const sortType = this.state.sort === \"asc\" ? \"desc\" : \"asc\";\n\n    this.setState({\n      data: cloneData.sort((a, b) => {\n        const asc = sortType === \"asc\";\n\n        if (a[sortColumn] < b[sortColumn]) {\n          return asc ? -1 : 1;\n        } else if (a[sortColumn] > b[sortColumn]) {\n          return asc ? 1 : -1;\n        } else {\n          return 0;\n        }\n      }),\n      directionSymbol: {\n        [sortColumn]:\n          this.state.directionSymbol[sortColumn] === \"asc\" ? \"desc\" : \"asc\",\n      },\n\n      sortColumn,\n      sort: sortType,\n    });\n  };\n\n  /* выбранная строка */\n  onRowSelect = (row) => {\n    this.setState({ row });\n  };\n\n  /* пагинация */\n  handleClick = (e) => {\n    let newCurrentPage = Number(e.target.innerHTML);\n    this.setState({ currentPage: newCurrentPage });\n  };\n\n  /* добавление строки */\n  addedRow = (newRow) => {\n    const data = this.state.data.concat();\n    data.unshift(newRow);\n    this.setState({ data });\n  };\n\n  render() {\n    const { currentPage, pageSize } = this.state;\n\n    const indexOfLastData = currentPage * pageSize;\n    const indexOfFirstData = indexOfLastData - pageSize;\n    const filteredData = this.getFilteredData();\n\n    let numberOfPages = Math.ceil(filteredData.length / pageSize);\n\n    const currentData = filteredData.slice(indexOfFirstData, indexOfLastData); //отображаем только 50 строк\n\n    let pages = [];\n    for (let i = 1; i <= numberOfPages; i++) {\n      pages.push(i);\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <SelectionButtons onSelect={this.SelectionButtonsHandler} />\n        </header>\n        {this.state.isButtonSelected ? (\n          this.state.error ? (\n            <p> Произошла ошибка во время загрузки данных :( </p>\n          ) : this.state.isLoading ? (\n            <Loading />\n          ) : (\n            <div className=\"mainContent\">\n              <div className=\"topFunctions\">\n                <Filter onSearch={this.searchHandler} />\n                <Form addRow={this.addedRow} />\n              </div>\n              {currentData.length === 0 ? (\n                <div className=\"noSearchResults\">\n                  {\" \"}\n                  Ничего не найдено. <br /> Введите новый текст для поиска или\n                  удалите предыдущий :){\" \"}\n                </div>\n              ) : (\n                <Table\n                  data={currentData}\n                  onSort={this.onSortHandler}\n                  sortSymbol={this.state.sort}\n                  sortField={this.state.sortColumn}\n                  onRowSelect={this.onRowSelect}\n                />\n              )}\n\n              <Pagination\n                numberOfPages={numberOfPages}\n                pages={pages}\n                currentPage={currentPage}\n                handleClick={this.handleClick}\n              />\n\n              {this.state.row ? (\n                currentData.length !== 0 ? (\n                  <OnRowSelectInfo row={this.state.row} />\n                ) : null\n              ) : null}\n            </div>\n          )\n        ) : (\n          <div className=\"startPage\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}