{"version":3,"sources":["Components/SelectionButtons/SelectionButtons.js","Components/Table /TableContent/TableContent.js","Components/Table /Table.js","Components/MainContent/MainContent.js","Components/Loading/Loading.js","App.js","serviceWorker.js","index.js"],"names":["props","className","onClick","onSelect","onSort","sortField","sortSymbol","data","map","item","key","id","phone","firstName","lastName","email","Table","onSortHandler","sortColumn","cloneData","state","concat","sortType","sort","setState","a","b","asc","directionSymbol","symbol","TableContent","this","React","Component","MainContent","App","SelectionButtonsHandler","url","isButtonSelected","isLoading","fetchData","fetch","response","json","Loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6723f517.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SelectionButtons.css\";\nexport default (props) => {\n  const smallUrl = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n  const bigUrl = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n\n  return (\n    <div className=\"userChoise\">\n      <div className=\"info\"> Выберите набор данных: </div>\n      <div className=\"mainButtons\">\n        <button\n          onClick={() => props.onSelect(smallUrl)}\n          className=\"btn btn-outline-warning\"\n        >\n          Small Table\n        </button>\n        <button\n          onClick={() => props.onSelect(bigUrl)}\n          className=\"btn btn-outline-info\"\n        >\n          Big Table\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default (props) => (\n  <div>\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th onClick={() => props.onSort(\"id\")}>\n            ID\n            {props.sortField === \"id\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"firstName\")}>\n            First Name\n            {props.sortField === \"firstName\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"lastName\")}>\n            Last Name\n            {props.sortField === \"lastName\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"email\")}>\n            E-mail\n            {props.sortField === \"email\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n          <th onClick={() => props.onSort(\"phone\")}>\n            Phone\n            {props.sortField === \"phone\" ? (\n              <small>{props.sortSymbol}</small>\n            ) : null}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.data.map((item) => (\n          <tr key={item.id + item.phone}>\n            <td>{item.id}</td>\n            <td>{item.firstName}</td>\n            <td>{item.lastName}</td>\n            <td>{item.email}</td>\n            <td>{item.phone}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import React from \"react\";\nimport TableContent from \"./TableContent/TableContent\";\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.props.data,\n      sortColumn: \"\",\n      sort: \"asc\",\n      directionSymbol: {\n        symbol: \"asc\",\n      },\n    };\n  }\n\n  onSortHandler = (sortColumn) => {\n    const cloneData = this.state.data.concat();\n    const sortType = this.state.sort === \"asc\" ? \"desc\" : \"asc\";\n\n    this.setState({\n      data: cloneData.sort((a, b) => {\n        const asc = sortType === \"asc\";\n\n        if (a[sortColumn] < b[sortColumn]) {\n          return asc ? -1 : 1;\n        } else if (a[sortColumn] > b[sortColumn]) {\n          return asc ? 1 : -1;\n        } else {\n          return 0;\n        }\n      }),\n      directionSymbol: {\n        [sortColumn]:\n          this.state.directionSymbol[sortColumn] === \"asc\" ? \"desc\" : \"asc\",\n      },\n\n      sortColumn,\n      sort: sortType,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <TableContent\n          data={this.state.data}\n          onSort={this.onSortHandler}\n          sortSymbol={this.state.sort}\n          sortField={this.state.sortColumn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport \"./MainContent.css\";\nimport Table from \"../Table /Table\";\n\nclass MainContent extends React.Component {\n  render() {\n    return (\n      <div className=\"mainContent\">\n       <Table  data={this.props.data}/>\n      </div>\n    );\n  }\n}\n\nexport default MainContent;\n","import React from \"react\";\nimport \"./Loader.css\";\n\nexport default () => (\n  <div className=\"Loader\">\n    <div className=\"lds-heart\">\n      <div></div>\n    </div>\n    <div className=\"LoaderText\">Loading data...</div>\n  </div>\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport SelectionButtons from \"./Components/SelectionButtons/SelectionButtons\";\nimport MainContent from \"./Components/MainContent/MainContent\";\nimport Loading from \"./Components/Loading/Loading\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isButtonSelected: false,\n      data: [],\n      isLoading: false,\n    };\n  }\n\n  async fetchData(url) {\n    /*делаем запрос*/\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      isLoading: false,\n      data,\n    });\n  }\n\n  SelectionButtonsHandler = (url) => {\n    /* показываем индикатор загрузки\n       и передаем url */\n    this.setState({\n      isButtonSelected: true,\n      isLoading: true,\n    });\n    this.fetchData(url);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <SelectionButtons onSelect={this.SelectionButtonsHandler} />\n        </header>\n        {this.state.isButtonSelected ? (\n          this.state.isLoading ? (\n            <Loading />\n          ) : (\n            <MainContent data={this.state.data} />\n          )\n        ) : (\n          <div className=\"startPage\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}